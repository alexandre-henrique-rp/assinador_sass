generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id                                   String        @id @default(uuid())
  name                                 String
  cpf                                  String        @unique
  birthDate                            DateTime
  email                                String        @unique
  username                             String        @unique
  password                             String
  hasCertificate                       Boolean       @default(false)
  isCertificateValid                   Boolean       @default(false)
  isActive                             Boolean       @default(true)
  documentPhotoUrl                     String?
  facialPhotoUrl                       String?
  createdAt                            DateTime      @default(now())
  updatedAt                            DateTime      @updatedAt
  certificates                         Certificate[]
  Document_Document_uploaderIdToClient Document[]    @relation("Document_uploaderIdToClient")
  documents                            Document[]    @relation("ClientDocuments")
  signatures                           Signature[]
}

model Certificate {
  id              String   @id @default(uuid())
  subject         String
  serialNumber    String
  publicKey       String
  privateKey      String
  issuedAt        DateTime
  validUntil      DateTime
  isValid         Boolean  @default(true)
  issuer          String
  certificatePem  String
  clientId        String?
  pathCertificate String?
  pfxPassword     String?
  csr             String
  isCA            Boolean  @default(false)
  isDownloaded    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  client          Client?  @relation(fields: [clientId], references: [id])

  @@unique([subject, serialNumber])
}

model Document {
  id                                 String      @id @default(uuid())
  originalName                       String
  size                               Int
  documentType                       String
  extension                          String
  hash                               String
  downloadUrl                        String
  viewUrl                            String
  isSigned                           Boolean     @default(false)
  ValidSigned                        Boolean     @default(false)
  clientId                           String
  uploaderId                         String?
  atualName                          String      @unique
  createdAt                          DateTime    @default(now())
  updatedAt                          DateTime    @updatedAt
  Client_Document_uploaderIdToClient Client?     @relation("Document_uploaderIdToClient", fields: [uploaderId], references: [id])
  client                             Client      @relation("ClientDocuments", fields: [clientId], references: [id], onDelete: Cascade)
  signatures                         Signature[]
}

model Signature {
  id            String   @id @default(uuid())
  signerId      String
  signedAt      DateTime @default(now())
  type          String   @default("Avan√ßada")
  certificateId String?
  documentId    String
  signatureData String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  document      Document @relation(fields: [documentId], references: [id])
  signer        Client   @relation(fields: [signerId], references: [id])
}
